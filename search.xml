<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>全栈测试随记</title>
      <link href="/posts/bdbed721/"/>
      <url>/posts/bdbed721/</url>
      
        <content type="html"><![CDATA[<p>本文将记录关于《Full Stack Testing》这本书中的诸多方法论与测试技巧</p><h1 id="手动探索测试"><a href="#手动探索测试" class="headerlink" title="手动探索测试"></a>手动探索测试</h1><p>手动探索性测试一般处于开发后进行，探索性测试强调所有三个角度（业务需求，技术实现细节，最终用户需求）结合起来，并从这些所有角度去挑战在过去业务角度，功能开发角度中被认为对的事情。相较于传统手动测试，完成特定测试任务以满足某一需求文档中的验收标注，手动探索测试更为自由，更为全局。手动探索测试在特定的测试环境中随意干预各种应用程序组件，例如数据库，服务或者后台进程。</p><h2 id="探索性测试框架"><a href="#探索性测试框架" class="headerlink" title="探索性测试框架"></a>探索性测试框架</h2><h3 id="等价类划分"><a href="#等价类划分" class="headerlink" title="等价类划分"></a>等价类划分</h3><p>假如有一个正数的输入值x，有x小于500，x在500 与1500之间，大于1500，针对三种情况分别有三个不同的策略。如何进行测试？</p><p>可以划分为三个等价类 {0-500，500-1500，1500- },只需要在其区间内各区三个数就可覆盖所有情况。</p><h3 id="边界值分析"><a href="#边界值分析" class="headerlink" title="边界值分析"></a>边界值分析</h3><p>边界值分析法是等价类的扩展方法。它将类之间模糊不清的边界值也纳入测试，{0，1，500，501，1500，1501}</p><h3 id="状态转换"><a href="#状态转换" class="headerlink" title="状态转换"></a>状态转换</h3><p>在程序的行为根据历史记录发生变化时可以使用状态转换将状态过程可视化。比如登录三次失败三次账号锁定。</p><p><img src="https://i.miji.bid/2024/01/31/6d46e770978a11be346d7fbd3da39c9a.webp" alt="状态转换"></p><h3 id="决策表"><a href="#决策表" class="headerlink" title="决策表"></a>决策表</h3><p>在面对逻辑关系（And&amp;or）时将可能结果列出。类似真值表</p><h3 id="因果图"><a href="#因果图" class="headerlink" title="因果图"></a>因果图</h3><p>直接画出因果关系。<br><img src="https://i.miji.bid/2024/01/31/1a3f9881383f43d7582d1217ad679242.webp" alt="因果图"></p><h3 id="成对测试"><a href="#成对测试" class="headerlink" title="成对测试"></a>成对测试</h3><p>或许在测试中会遇到多个条件组合需要测试的情况，在复杂情况下如果通过穷举则非常困难。比如目前有三个条件每一个条件都有两种情况 A(1,2), B(1,2), C(1,2)。我们需要测试 2 * 2 * 2 种情况才能完全覆盖。<br>我们如何测试单因子和双因子错误率？</p><p>单错误因子情况下假设 A(1) 为错误因子。我们<strong>至少</strong>需要  {A(1),B(1),C(1)} &amp; {A(2),B(1),C(1)} ，两组数据就能测出。</p><p>双错误因子情况下假设 {A(1),B(1)} 为错误因子。我们<strong>至少</strong>需要 {A(1),B(1),C(1)} &amp; {A(1),B(1),C(2)} &amp; {A(1),B(2),C(1)} &amp; {A(2),B(1),C(1)} 四组数据才能测出。</p><p>而三因子情况下我们需要全部8组数据才能测出。</p><p>研究发现单因子和双因子导致错误率在80%左右，而三因子错误率在20%。 所以只需要测试单因子与双因子情况就能基本覆盖错误。同时减少50%的测试量。<br><a href="https://pairwise.teremokgames.com/">成对测试算法工具</a></p><h3 id="采样"><a href="#采样" class="headerlink" title="采样"></a>采样</h3><p>随机抽样检查</p><h3 id="经验法"><a href="#经验法" class="headerlink" title="经验法"></a>经验法</h3><p>根据我的经验，以下是经常出现的几种类型的错误：</p><ul><li><p>缺少对无效&#x2F;空白输入值的验证，并且缺少指导用户更正输入的适当错误消息</p></li><li><p>数据验证、技术和业务错误返回的 HTTP 状态代码不明确</p></li><li><p>特定于域、数据类型、状态等的未处理的边界条件</p></li><li><p>UI 端未处理的技术错误，例如服务器关闭、响应超时等</p></li><li><p>转换、数据刷新和导航期间的 UI 问题（例如抖动和残留）</p></li><li><p>SQL 关键字_like_和_equals_可以互换使用，完全改变结果</p></li><li><p>未清除的缓存和未定义的会话超时</p></li><li><p>当用户单击浏览器中的后退按钮时重新发布请求</p></li><li><p>从不同操作系统平台上传文件时缺少文件格式验证</p></li></ul><h2 id="探索功能"><a href="#探索功能" class="headerlink" title="探索功能"></a>探索功能</h2><p><strong>对一个全新的应用进行测试时，你应该想到哪些测试思路?</strong></p><h3 id="功能性用户流程"><a href="#功能性用户流程" class="headerlink" title="功能性用户流程"></a>功能性用户流程</h3><p>测试用户完整使用应用的流程，在这个测试可以使用上文所介绍的测试框架。<br><strong>重复该流程</strong><br>在完成一次测试后不刷新状态，重新测试。<br><strong>多用户流程</strong><br>多用户并发操作时会发生什么？</p><h3 id="失败和错误处理"><a href="#失败和错误处理" class="headerlink" title="失败和错误处理"></a>失败和错误处理</h3><p>当服务器返回错误的信息，前端UI应该如何处理。</p><h3 id="用户界面的观感"><a href="#用户界面的观感" class="headerlink" title="用户界面的观感"></a>用户界面的观感</h3><p>不是指用户界面的设计美感，而是关于用户体验方面，比如某一描述性文字是否有足够的空间显示延迟时的等待体验，图片的质量等等方面。</p><h3 id="跨职能方面"><a href="#跨职能方面" class="headerlink" title="跨职能方面"></a>跨职能方面</h3><p>安全，性能，可访问性，身份验证，授权，隐私，可审查性等等方面。</p><h2 id="手动探索测试策略"><a href="#手动探索测试策略" class="headerlink" title="手动探索测试策略"></a>手动探索测试策略</h2><p>对于一个陌生的应用可以从一下五个方面思考测试策略。</p><h3 id="用户角色"><a href="#用户角色" class="headerlink" title="用户角色"></a>用户角色</h3><p>一个应用可能有不同的角色，扮演不同的角色去了解应用。</p><h3 id="领域"><a href="#领域" class="headerlink" title="领域"></a>领域</h3><p>每一个行业，每一个业务领域都有独特的工作流程，你需要了解应用的领域知识。</p><h3 id="业务重点"><a href="#业务重点" class="headerlink" title="业务重点"></a>业务重点</h3><p>在复杂业务上，考虑项目的可扩展性与项目整体。</p><h3 id="基础设施和配置"><a href="#基础设施和配置" class="headerlink" title="基础设施和配置"></a>基础设施和配置</h3><p>了解实际部署应用机器的如构件的各项配置是必要的，它能帮你观察是否出现了异常的情况。</p><h3 id="组织架构"><a href="#组织架构" class="headerlink" title="组织架构"></a>组织架构</h3><p>组织架构也是测试的切入点。例如，如果架构涉及 Web 服务，您可能需要对 API 执行探索性测试，而不仅仅是探索 UI。同样，如果应用程序涉及事件流，那么探索异步通信的案例就变得很重要。</p><h2 id="测试工具"><a href="#测试工具" class="headerlink" title="测试工具"></a>测试工具</h2><h3 id="思维导图可能会帮到你"><a href="#思维导图可能会帮到你" class="headerlink" title="思维导图可能会帮到你"></a>思维导图可能会帮到你</h3><p><img src="https://i.miji.bid/2024/01/31/d05a16d7f0bbbc5cf217ef7547090630.webp" alt="思维导图"></p><h3 id="Apifox"><a href="#Apifox" class="headerlink" title="Apifox"></a><a href="https://apifox.com/">Apifox</a></h3><p>集接口测试，在线mock，环境变量，脚本于一体的强大测试工具，缺点是强制登录。</p><h3 id="测试环境卫生"><a href="#测试环境卫生" class="headerlink" title="测试环境卫生"></a>测试环境卫生</h3><h3 id="共享测试环境与专用测试环境"><a href="#共享测试环境与专用测试环境" class="headerlink" title="共享测试环境与专用测试环境"></a>共享测试环境与专用测试环境</h3><p>一个团队一个测试环境。</p><h3 id="测试数据卫生"><a href="#测试数据卫生" class="headerlink" title="测试数据卫生"></a>测试数据卫生</h3><p>测试数据属于权限范围测试人员的行为，他们应该遵循某些实践，以确保他们不会无意中破坏自己的探索。特别是，在同一部署中继续测试新功能时，请注意过时的数据和配置。避免此类复杂情况的建议是，每当开始新的用户故事时，就部署新的构建（假设新的部署将清除旧的数据和配置并将应用程序恢复到新状态）。另一种选择是为每个用户故事（例如新用户）创建一组新的测试数据，而不是探索可能处于不同状态的现有用户。</p><p>当有数百个链接表时，测试数据创建可能会很复杂。然后，一个选项是让新部署删除旧数据并将其替换为一组标准测试数据，或者让 SQL 脚本创建适当的新测试数据作为部署的一部分。</p><h3 id="自治团队"><a href="#自治团队" class="headerlink" title="自治团队"></a>自治团队</h3><p>团队成员可能没有登录凭据或更新配置、查看应用程序日志或设置存根所需的权限；要执行此类操作，他们需要向 DevOps 或系统维护团队请求帮助。这在探索性测试期间尤其令人沮丧，因为测试人员可能需要访问所有应用程序组件。确保团队是自主的并且能够访问所需的一切，这将减少由于外部依赖性而导致的延迟并实现顺利交付。</p>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
            <tag> 全栈测试 </tag>
            
            <tag> 方法论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【galgame】rkr三部曲感想——悲剧是成年人的童话</title>
      <link href="/posts/3c601fd3/"/>
      <url>/posts/3c601fd3/</url>
      
        <content type="html"><![CDATA[<p><strong>最近推完了rkr三部曲，写下一些感想总结。</strong></p><h2 id="关于rkr"><a href="#关于rkr" class="headerlink" title="关于rkr"></a>关于rkr</h2><p>喜欢写悲剧，擅长抓读者的同情心，注重剧情。在使用剧情工具时过于明显，以及大量的插叙与回忆让叙事的节奏把握不好，对于一些剧情伏笔过于刻意，莫名其妙的同时不能给读者留下印象。<br>总体来说，瑕不掩瑜，大多数缺点都是技术性问题，可以看到rkr正在进步这些缺点逐渐减少。</p><h2 id="关于rkr剧本下的叙事线"><a href="#关于rkr剧本下的叙事线" class="headerlink" title="关于rkr剧本下的叙事线"></a>关于rkr剧本下的叙事线</h2><p>在纸魔与冥契中rkr放弃传统的平行角色线结构采用了树形角色线结构。我可以理解树形结构层层递进在这种强剧情作品中的优势。但个人认为<strong>rkr并没有发挥的很好</strong>。<br>rkr的剧本是非常跳跃式的，爱用叙述性诡计与埋伏笔。但是这种写法让剧情只能是单线的，否则前面的铺垫将很难收回。于是我们就看到了<strong>灾难般的个人分线</strong>，一个没头没尾不明所以的故事，叙事风格极其严重的割裂，完全不能算end的end。<br>那么既然是单线剧情又是树形叙事结构，<strong>为何不将分线结束后重新回归到主线呢</strong>？我认为对于擅长叙述性诡计的rkr这种技法一定不在话下。但这个问题关键在于考虑读者的接受度，<strong>读者进入个人线是否愿意再回归主线</strong>。</p><p>但我们也不能把这个锅全扣在树形结构上因为平行结构的水葬银货也被诟病个人线水。这里为rkr伸冤一下，不是rkr不愿意认真写个人线。核心问题是故事设计中这就是一个单线故事，在二选一时水葬这个故事就已经基本讲完，个人线已经写无可写了。</p><p><em><strong>于是我们看到了rkr的剧本与传统galgame的冲突其一：强剧情作品下的单线叙事与传统galgame多线之间的冲突。</strong></em></p><h2 id="关于rkr剧本下的叙事视角"><a href="#关于rkr剧本下的叙事视角" class="headerlink" title="关于rkr剧本下的叙事视角"></a>关于rkr剧本下的叙事视角</h2><p>第一人称下“空白”的主角，在galgame或者小说中都会将主角设定成一个“空白”的人，没有性格，没有观点，没有记忆的三无人员。读者可以简单的钻入这具空壳之中，也就是增强第一人称下的代入感。<br>然而这样的 <strong>“白板”男主显然不是rkr故事中想要的</strong>，rkr不愿意让自己的剧情服从于读者。反过来主角是要为剧情服务的。这就导致了已经带入男主角色的玩家被迫服从于剧中角色，这一点在纸魔中尤为明显，<strong>让不愿意服从剧情的读者观感较差</strong>。</p><h3 id="而在后续的作品中rkr通过技术性的方法进行了改善："><a href="#而在后续的作品中rkr通过技术性的方法进行了改善：" class="headerlink" title="而在后续的作品中rkr通过技术性的方法进行了改善："></a>而在后续的作品中rkr通过技术性的方法进行了改善：</h3><ul><li>在水葬中rkr给了男主很大的角色分量:<br>男主的刻画甚至超过很多女角色，塑造了一个非常立体的男主，可以说是全篇的核心人物。同时将核心矛盾外推，让推动剧情的矛盾并不来自男主与读者，多数情况读者扮演的是一个帮助，解救他人的人。增强读者对男主行为的认同感。</li><li>在冥契中解决办法是放弃单一的第一人称，而是采用多角色视角：<br>在前几章日常剧情中依然使用了传统的第一人称男主视角，而男主也是传统的“空白”。然而当在后续进入核心剧情，剧情发展逐渐加速时越来越多的采用了多视角叙事。逐渐的让观众不在被束缚在男主的空壳中，让观众从故事中的人逐渐坐到了局外的观众席，从而能以欣赏的角度去看这个故事。而在剧情进入高潮时rkr终于赋予了男主性格与想法，于此引发全作中最重要的两位主角之间的核心矛盾，进一步将剧情推到顶峰。可见rkr写作技法的日渐成熟。</li></ul><p><em><strong>于是我们看到了rkr的剧本与传统galgame的冲突其二：强剧情作品下主角服务于剧情与传统galgame剧情服务于主角之间的矛盾</strong></em></p><h2 id="关于rkr剧本下剧情与故事背景"><a href="#关于rkr剧本下剧情与故事背景" class="headerlink" title="关于rkr剧本下剧情与故事背景"></a>关于rkr剧本下剧情与故事背景</h2><h3 id="rkr笔下的童话故事"><a href="#rkr笔下的童话故事" class="headerlink" title="rkr笔下的童话故事"></a>rkr笔下的童话故事</h3><p>rkr的剧情中都带有一些魔法一样的设定，魔法书，魔法师，人鱼之类的。就像讲述传说一样的背景故事，这就是为什么我会将rkr的剧本冠上童话之名。在负面的悲剧中我们总能看到rkr传递给读者正面的希望，同时也能看到悲剧的美。</p><h3 id="选择受到了限制"><a href="#选择受到了限制" class="headerlink" title="选择受到了限制"></a>选择受到了限制</h3><p>从水葬中的诱拐，监禁。冥契中的剧团，行业，我们可以看出rkr是一个富有野心的剧本家，想写的内容非常的多，非常的杂。能撑得起复杂感动人心的剧情的只有丰富立体的角色，然而作为一个galgame最后是要服务于恋爱剧情。这在一定程度上弱化了读者对于精神内核的感受，尤其是非核心人物，扁平的人物占据了重要的剧情位置，自然给人强烈的工具感。<br>个人认为，既然剧情放这么放得开，故事背景与人物同样也应该放开，不限于学校同学青春友情爱情，这些传统galgame元素，去选择更大的背景与题材。</p><p><em><strong>于是我们看到了rkr的剧本与传统galgame的冲突其三：强剧情作品下深刻内核与传统galgame恋爱故事的矛盾</strong></em></p><h2 id="关于rkr剧本下的商业妥协"><a href="#关于rkr剧本下的商业妥协" class="headerlink" title="关于rkr剧本下的商业妥协"></a>关于rkr剧本下的商业妥协</h2><p>综上三条主要矛盾，<strong>我们可以发现rkr剧本做出的很多让步与商业妥协</strong>，关于这个问题，作为商业作，无可厚非，但还是非常惋惜。尤其是纸上的魔法使，将前三章制作成体验版来为正式版预热，为了留下悬念看似平缓的恋爱喜剧突然的剧情加速。然而之后剧情又突然重新放缓。这对于先体验版后接正式版的读者很友好可以看作两段游玩体验，但总体来看却是故事节奏的稀碎。</p><blockquote><p>ps: 另外在我看来rkr剧本中某些女主完全是工具人女主，和主线关系很小。感觉像是为了满足女主数量而拉上去凑数的。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>rkr是一位有想法有技术但是被传统galgame恋爱剧限制了的优秀剧本家。在这里期望galgame市场与业界的快速成长，未来能有更加宽泛定义的galgame，不拘泥于恋爱剧。（甚至期待无糖galgame的出现）。</p>]]></content>
      
      
      <categories>
          
          <category> galgame </category>
          
      </categories>
      
      
        <tags>
            
            <tag> galgame </tag>
            
            <tag> rkr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>混沌工程随记</title>
      <link href="/posts/9a583f9/"/>
      <url>/posts/9a583f9/</url>
      
        <content type="html"><![CDATA[<p>混沌工程并不是在生产环境中搞破坏。搞破坏很容易但完成下述事情很难：减小爆炸半径，对安全性进行批判性思考，确定漏洞是否值得修复，决定是否应该进行实验。<br>寻找做对的地方比寻找做错的地方提供的信息多得多，因为对于复杂系统而言，故障可能是因为熵增而导致的系统性错误，这些并不能被预测到。而混沌工程通过实验认识到系统的属性信息，从而可以通过测试的方法规避掉错误，让团队拥有更好韧性。 对与让系统更加健壮而言，一味的冗余只会掩盖问题的存在，同时冗余的同时引入了故障，发生了熵增。</p>]]></content>
      
      
      <categories>
          
          <category> 工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
            <tag> 工程 </tag>
            
            <tag> 混沌工程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
